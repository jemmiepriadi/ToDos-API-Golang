// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ToDo": {
            "post": {
                "description": "for save user profile data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a ToDo",
                "operationId": "save-profile",
                "parameters": [
                    {
                        "description": "request body json",
                        "name": "requestbody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Profile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Response"
                        }
                    }
                }
            }
        },
        "/ToDo/id": {
            "put": {
                "description": "for update user ToDo data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a ToDo",
                "operationId": "update-Todo",
                "parameters": [
                    {
                        "description": "request body json",
                        "name": "requestbody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Profile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "for deleting user profile data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a ToDo",
                "operationId": "delete-ToDo",
                "parameters": [
                    {
                        "description": "request body json",
                        "name": "requestbody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Profile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Response"
                        }
                    }
                }
            }
        },
        "/ToDos": {
            "get": {
                "description": "get user ToDo List",
                "produces": [
                    "application/json"
                ],
                "summary": "Get User Todo List",
                "operationId": "get-profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Profile"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/ToDos/id": {
            "get": {
                "description": "get user ToDo List",
                "produces": [
                    "application/json"
                ],
                "summary": "Get User Todo List",
                "operationId": "getById-profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Profile"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Profile": {
            "type": "object",
            "properties": {
                "DateInput": {
                    "type": "string",
                    "example": "2022-07-05"
                },
                "Description": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Bekerja"
                    ]
                },
                "Name": {
                    "type": "string",
                    "example": "Jemmi"
                },
                "date": {
                    "type": "string",
                    "example": "0001-01-01T07:00:00+07:00"
                }
            }
        },
        "main.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "00"
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Succesful"
                }
            }
        },
        "model.Profile": {
            "type": "object",
            "properties": {
                "DateInput": {
                    "type": "string",
                    "example": "2022-07-05"
                },
                "Description": {
                    "type": "string",
                    "example": "Berenang"
                },
                "Name": {
                    "type": "string",
                    "example": "Jemmi"
                },
                "date": {
                    "type": "string",
                    "example": "0001-01-01T07:00:00+07:00"
                },
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
